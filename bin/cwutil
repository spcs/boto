#!/usr/bin/python
# Author: Chris Moyer <cmoyer@newstex.com>
# Description: CloudWatch Utility
# For listing stats, creating alarms, and managing 
# other CloudWatch aspects

import boto
from boto.ec2.cloudwatch import MetricAlarm 
cw = boto.connect_cloudwatch(path="monitor")

from datetime import datetime, timedelta

def _parse_time(time_string):
    """Internal function to parse a time string"""
    NO_MS_TIME_FORMAT = "%Y-%m-%dT%H:%M:%S"
    return datetime.strptime(time_string, NO_MS_TIME_FORMAT)

def _parse_dict(d_string):
    result = {}
    if d_string:
        for d in d_string.split(","):
            d = d.split(":")
            result[d[0]] = d[1]
    return result

def ls(namespace=None):
    """
    List metrics, optionally filtering by a specific namespace
        namespace: Optional Namespace to filter on
    """
    print "%-10s %-50s %s" % ("Namespace", "Metric Name", "Dimensions")
    print "-"*80
    for m in cw.list_metrics(namespace=namespace):
        print "%-10s %-50s %s" % (m.namespace, m.name, m.dimensions)

def delete_alarm(alarm_name):
    """
    Delete Alarm
    """
    return cw.delete_alarms([alarm_name])
    

def ls_alarm(alarm_name_prefix=None, state_value=None):
    """
    Describe list of alarms.
    """
    ls = cw.describe_alarms(alarm_name_prefix=alarm_name_prefix, 
                            state_value=None)
    print "%-20s %-25s %-10s %-40s" % ("AlarmName", "State", "Action",
                                "(namespace:metric:dimensions:"
                                "statistic:period:evalution)>threshold(unit) " 
                                "A:alarm_action O:ok_action I:insuff.action")
    print "-"*80
    for l in ls:
        print ("%-20s %-25s %-10s (%s:%s:%s:%s:%s:%s)%s%s(%s) A:%s O:%s I:%s " % 
               (l.name, l.state_value, l.actions_enabled, l.namespace, 
                l.metric, l.dimensions, l.statistic, l.period, 
                l.evaluation_periods, l.comparison, l.threshold, l.unit, 
                l.alarm_actions, l.ok_actions, l.insufficient_data_actions))
    

def history(alarm_name=None, start_time=None, end_time=None, 
            history_item_type=None):
    """
    List alarm history
    
    Action
    """
    next_token = None

    # Parse the times
    if end_time:
        end_time = _parse_time(end_time)
    else:
        end_time = datetime.utcnow()
    if start_time:
        start_time = _parse_time(start_time)
    else:
        start_time = datetime.utcnow() - timedelta(days=1)

    ls = cw.describe_alarm_history(alarm_name=alarm_name, 
                                   start_date=start_time, 
                                   end_date=end_time, 
                                   history_item_type=history_item_type, 
                                   max_records=100,
                                   next_token=next_token)
    
    print "%-26s %-20s %-20s %s" % ("Timestamp", "AlarmName", "ItemType", 
                                    "Summary")
    print "-"*80
    for l in sorted(ls, cmp=lambda x,y: cmp(x.timestamp, y.timestamp)): 
        print "%-26s %-20s %-20s %s" % (l.timestamp, l.name, l.tem_type, 
                                        l.summary)


def put_alarm(namespace, metric_name, dimensions, alarm_name, 
              statistic="Average", comparison=">", threshold=90, unit=None, 
              period=60, evaluation_periods=1, description=None, 
              alarm_actions=None, insufficient_data_actions=None, 
              ok_actions=None):
    """
    Put MetricAlarm
        namespace:
        metric_name:
        dimensions: 
        alarm_name: 
        statistic: default "Average"
        comparison: default ">" 
        threshold: default 90
        unit: default None
        period: default 60
        evaluation_periods: default 1 minute
        description: default None
        alarm_actions: default None
        insufficient_data_actions: default None 
        ok_actions: default None
    """
    # Parse the dimensions
    dimensions = _parse_dict(dimensions)
    
    # Parse alarm_actions
    alarm_actions = alarm_actions.split(',') if alarm_actions else None
    insufficient_data_actions = insufficient_data_actions.split(',') \
                                if insufficient_data_actions else None
    ok_actions = ok_actions.split(',') if ok_actions else None
        
    alarm = MetricAlarm(connection=cw, name=alarm_name, metric=metric_name, 
                        namespace=namespace, statistic=statistic, 
                        comparison=comparison, threshold=threshold, 
                        period=period, evaluation_periods=evaluation_periods, 
                        unit=unit, description=description, 
                        dimensions=dimensions, alarm_actions=alarm_actions, 
                        insufficient_data_actions=insufficient_data_actions, 
                        ok_actions=ok_actions)
    cw.put_metric_alarm(alarm)


def stats(namespace, metric_name, dimensions=None, statistics="Average", start_time=None, end_time=None, period=60, unit=None):
    """
    Lists the statistics for a specific metric
        namespace: The namespace to use, usually "AWS/EC2", "AWS/SQS", etc.
        metric_name: The name of the metric to track, pulled from `ls`
        dimensions: The dimensions to use, formatted as Name:Value (such as QueueName:myQueue)
        statistics: The statistics to measure, defaults to "Average"
             'Minimum', 'Maximum', 'Sum', 'Average', 'SampleCount'
        start_time: Start time, default to now - 1 day
        end_time: End time, default to now
        period: Period/interval for counts, default to 60 minutes
        unit: Unit to track, default depends on what metric is being tracked
    """

    # Parse the dimensions
    dimensions = _parse_dict(dimensions)

    # Parse the times
    if end_time:
        end_time = _parse_time(end_time)
    else:
        end_time = datetime.utcnow()
    if start_time:
        start_time = _parse_time(start_time)
    else:
        start_time = datetime.utcnow() - timedelta(days=1)
            
    print "%-30s %s" % ('Timestamp', statistics)
    print "-"*50
    data = {}
    for m in cw.get_metric_statistics(int(period), start_time, end_time, metric_name, namespace, statistics, dimensions, unit):
        data[m['Timestamp']] = m[statistics]
    keys = data.keys()
    keys.sort()
    for k in keys:
        print "%-30s %s" % (k, data[k])

def put(namespace, metric_name, dimensions=None, value=None, unit=None, statistics=None, timestamp=None):
    """
    Publish custom metrics
        namespace: The namespace to use; values starting with "AWS/" are reserved
        metric_name: The name of the metric to update
        dimensions: The dimensions to use, formatted as Name:Value (such as QueueName:myQueue)
        value: The value to store, mutually exclusive with `statistics`
        statistics: The statistics to store, mutually exclusive with `value`
            (must specify all of "Minimum", "Maximum", "Sum", "SampleCount")
        timestamp: The timestamp of this measurement, default is current server time
        unit: Unit to track, default depends on what metric is being tracked
    """
    
    def simplify(lst):
        return lst[0] if len(lst) == 1 else lst

    print cw.put_metric_data(namespace, simplify(metric_name.split(';')),
        dimensions = simplify(map(_parse_dict, dimensions.split(';'))) if dimensions else None,
        value = simplify(value.split(';')) if value else None,
        statistics = simplify(map(_parse_dict, statistics.split(';'))) if statistics else None,
        timestamp = simplify(map(_parse_time, timestamp.split(';'))) if timestamp else None,
        unit = simplify(unit.split(';')) if unit else None)


def enable_alarm_actions(alarm_names):
    """
    Enable alarm actions.
        alarmName: Alarm name to activate action.
    """
    print cw.enable_alarm_actions(alarm_names=alarm_names)


def disable_alarm_actions(alarm_names):
    """
    Enable alarm actions.
        alarmName: Alarm name to activate action.
    """
    print cw.disable_alarm_actions(alarm_names=alarm_names)


def help(fnc=None):
    """
    Print help message, optionally about a specific function
    """
    import inspect
    self = sys.modules['__main__']
    if fnc:
        try:
            cmd = getattr(self, fnc)
        except:
            cmd = None
        if not inspect.isfunction(cmd):
            print "No function named: %s found" % fnc
            sys.exit(2)
        (args, varargs, varkw, defaults) = inspect.getargspec(cmd)
        print cmd.__doc__
        print "Usage: %s %s" % (fnc, " ".join([ "[%s]" % a for a in args]))
    else:
        print "Usage: cwutil [command]"
        for cname in dir(self):
            if not cname.startswith("_") and not cname == "cmd":
                cmd = getattr(self, cname)
                if inspect.isfunction(cmd):
                    doc = cmd.__doc__
                    print "\t%s - %s" % (cname, doc)
    sys.exit(1)


if __name__ == "__main__":
    import sys
    self = sys.modules['__main__']
    if len(sys.argv) >= 2:
        try:
            cmd = getattr(self, sys.argv[1])
        except:
            cmd = None
        args = sys.argv[2:]
    else:
        cmd = help
        args = []
    if not cmd:
        cmd = help
    try:
        cmd(*args)
    except TypeError, e:
        print e
        help(cmd.__name__)
